entity UserProfile {
    userID Integer,
    username String required,
    email String required,
    passwordHash String required
}

entity Charity {
    charityID Integer,
    nameOfCharity String required,
    descriptionShort String required,
    descriptionLong String required,
    upcomingEvents String required
}

entity User {
    picture ImageBlob,
    course String required,
    bio String required,
    badgeType String,
    badgeDateEarned LocalDate
}

entity Authentication {
    token String required,
    createdAt ZonedDateTime required,
    expiresAt ZonedDateTime required,
    refreshToken String,
    authenticationType String required
}

entity Events {
    title String required,
    description String required,
    startTime ZonedDateTime required,
    endTime ZonedDateTime required,
    location String,
    url String
}

entity VolunteerApplication {
    userid Integer,
    applicationId Integer,
    applicationDate ZonedDateTime required,
    status String required,
    volunteerRoles String,
    availability String,
    motivation String,
    experience String,
    preferredCharityId Integer
}

entity GroupDonator {
    groupID Integer,
    groupName String required,
    eventID Integer required,
    totalCollectionAmount Integer required,
    userID Integer
}

entity Comments {
    userID Integer,
    commentText String required,
    commentID Integer,
    datePosted LocalDate required
}

relationship OneToOne {
    Authentication {userProfile(userID)} to UserProfile,
    User{userProfile(userID)} to UserProfile
    // Corrected: Removed incorrect one-to-one relationships.
}

relationship ManyToOne {
    VolunteerApplication{charity(charityID)} to Charity,
    Comments {userProfile(userID)} to UserProfile,
    GroupDonator {userProfile(userID)} to UserProfile
    // Corrected and optimized: Defined clearer ownership and removed redundant relationships.
}

relationship OneToMany {
    Charity{event} to Events{charity(charityID)}
    UserProfile {userID} to VolunteerApplication{userID}
    // Optimized: Used OneToMany for Charity to Events relationship.
}

relationship ManyToMany {
    User {comment(commentID)} to Comments{user(userID)}
    // Adjusted: Defined ManyToMany relationship between Users and Comments.
}

// Define services where complex logic or operations not directly tied to database storage occur.
service User, UserProfile, Authentication, Charity, Events, VolunteerApplication, GroupDonator, Comments with serviceClass

// Optionally, if you want to fine-tune how DTOs are generated or if you use them.
dto User, UserProfile, Charity, Events, VolunteerApplication, GroupDonator, Comments with mapstruct

// Pagination for entities that might have a lot of records.
paginate User, Charity, Events, VolunteerApplication, GroupDonator, Comments with pagination
